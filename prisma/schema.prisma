// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  user_id             Int           @id @default(autoincrement())
  UserName            String        @unique @db.VarChar(255)
  email               String?       @unique @db.VarChar(255)
  resetToken          String?       @unique @db.VarChar(255)
  Password            String        @db.VarChar(255)
  role                String?       @db.VarChar(255)
  CreatedDate         DateTime?     @default(now()) @db.Timestamptz(6)
  ModifiedDate        DateTime?     @default(now()) @db.Timestamptz(6)
  Students            Students[]
  Class               Class[]
  Subject             Subject[]
  Question            Question[]
  ClassSubject        ClassSubject[]
  QuestionCategory    QuestionCategory[]
  Answer              Answer[]
  QuarterQuestionCategory QuarterQuestionCategory[]
  Quarter    Quarter[]
}

model Students{
  students_id         Int           @id @default(autoincrement())
  UserName            String        @unique @db.VarChar(255)
  email               String?       @unique @db.VarChar(255)
  resetToken          String?       @unique @db.VarChar(255)
  Password            String        @db.VarChar(255)
  CreatedDate         DateTime?     @default(now()) @db.Timestamptz(6)
  ModifiedDate        DateTime?     @default(now()) @db.Timestamptz(6)
  user_id             Int?
  User                User?         @relation(fields: [user_id], references: [user_id], onUpdate: NoAction)
}

model Class {
  class_id     Int           @id @default(autoincrement())
  ClassName    String        @db.VarChar(255)
  user_id      Int?
  CreatedDate  DateTime?     @default(now()) @db.Timestamptz(6)
  ModifiedDate DateTime?     @default(now()) @db.Timestamptz(6)
  User         User?         @relation(fields: [user_id], references: [user_id], onUpdate: NoAction)
  ClassSubject ClassSubject[]
}

model Subject {
  subject_id   Int           @id @default(autoincrement())
  SubjectName  String        @db.VarChar(255)
  user_id      Int?
  CreatedDate  DateTime?     @default(now()) @db.Timestamptz(6)
  ModifiedDate DateTime?     @default(now()) @db.Timestamptz(6)
  User         User?         @relation(fields: [user_id], references: [user_id], onUpdate: NoAction)
  ClassSubject ClassSubject[]
}

model ClassSubject {
  class_subject_id  Int       @id @default(autoincrement())
  user_id           Int?
  class_id          Int
  subject_id        Int
  CreatedDate       DateTime? @default(now()) @db.Timestamptz(6)
  ModifiedDate      DateTime? @default(now()) @db.Timestamptz(6)
  Class             Class     @relation(fields: [class_id], references: [class_id], onDelete: Cascade, onUpdate: Cascade)
  Subject           Subject   @relation(fields: [subject_id], references: [subject_id], onDelete: Cascade, onUpdate: Cascade)
  User              User?     @relation(fields: [user_id], references: [user_id], onUpdate: NoAction)
}

model QuestionCategory{
  question_category_id  Int         @id @default(autoincrement())
  user_id               Int?
  questioncategoryName  String      @db.VarChar(255)
  User                  User?       @relation(fields: [user_id], references: [user_id], onUpdate: NoAction)
  Question              Question[]
  QuarterQuestionCategory QuarterQuestionCategory[]
}

model Quarter {
  quarter_id            Int         @id @default(autoincrement())
  user_id               Int?
  quarterName           String      @db.VarChar(255)
  User                  User?       @relation(fields: [user_id], references: [user_id], onUpdate: NoAction)
  QuarterQuestionCategory QuarterQuestionCategory[]
}

model QuarterQuestionCategory {
  quarter_category_id            Int       @id @default(autoincrement())
  user_id                        Int?
  quarter_id                     Int
  question_category_id           Int
  CreatedDate                    DateTime? @default(now()) @db.Timestamptz(6)
  ModifiedDate                   DateTime? @default(now()) @db.Timestamptz(6)
  Quarter                        Quarter   @relation(fields: [quarter_id], references: [quarter_id], onDelete: Cascade, onUpdate: Cascade)
  QuestionCategory               QuestionCategory   @relation(fields: [question_category_id], references: [question_category_id], onDelete: Cascade, onUpdate: Cascade)
  User                           User?     @relation(fields: [user_id], references: [user_id], onUpdate: NoAction)
}

model Question {
  question_id             Int                  @id @default(autoincrement())
  question                String
  correctAnswer           String
  user_id                 Int?
  question_category_id    Int
  User                    User?                 @relation(fields: [user_id], references: [user_id], onUpdate: NoAction)
  QuestionCategory        QuestionCategory?     @relation(fields: [question_category_id], references: [question_category_id], onUpdate: NoAction)
  Answer                  Answer[]
}

model Answer {
  answer_id      Int      @id @default(autoincrement())
  answer         String
  question_id    Int
  user_id        Int?
  isCorrect      Boolean
  User           User?     @relation(fields: [user_id], references: [user_id], onUpdate: NoAction)
  question       Question @relation(fields: [question_id], references: [question_id])
}